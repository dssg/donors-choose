config_version: 'v7'

model_comment: 'quickstart test run'

temporal_config:

    # first date our feature data is good
    feature_start_time: '2013-01-01'
    feature_end_time: '2018-01-01'

    # first date our label data is good
    # donorschoose: as far back as we have good donation data
    label_start_time: '2013-01-01'
    label_end_time: '2018-01-01'

    model_update_frequency: '3month'

    # length of time defining a test set
    test_durations: ['1month']
    # defines how far back a training set reaches
    max_training_histories: ['1month']

    # we sample every day, since new projects are posted
    # every day
    training_as_of_date_frequencies: ['1day']
    test_as_of_date_frequencies: ['1day']
    
    # like our project timeout
    training_label_timespans: ['4month']
    test_label_timespans: ['4month']
    

cohort_config:
  query: |
    SELECT distinct(entity_id), date_posted as as_of_date
      FROM optimized.projects
    WHERE date_posted = '{as_of_date}'::date - interval '1day'

label_config:
  query: |
        WITH donation_totals AS 
            (SELECT projects.entity_id, 
            sum(case when donation_to_project is null then 0 else donation_to_project end) as total_donations, 
            total_asking_price AS total_price
            FROM optimized.projects 
            LEFT JOIN optimized.donations ON (donations.entity_id = projects.entity_id
            							  and donations.donation_timestamp < (projects.date_posted 
                + interval '{label_timespan}'))
            WHERE projects.date_posted = '{as_of_date}'::date - interval '1day'
            GROUP BY projects.entity_id, projects.total_asking_price)
        SELECT entity_id,
        (total_donations < total_price)::int AS outcome  
        FROM optimized.projects
        RIGHT JOIN donation_totals using(entity_id)

  name: 'quickstart_label'


feature_aggregations:
  -
    prefix: 'project_features'
    from_obj: 'optimized.projects'
    knowledge_date_column: 'date_posted'

    aggregates_imputation:
      all:
        type: 'zero'

    categoricals_imputation:
      all:
        type: 'null_category'          

    categoricals:
      -
        column: 'school_metro'
        metrics:
          - 'sum' 
        choice_query: 'select distinct school_metro from optimized.projects'
      -
        column: 'resource_type'
        metrics:
          - 'sum' 
        choice_query: 'select distinct resource_type from optimized.projects'
      -
        column: 'poverty_level'
        metrics:
          - 'sum' 
        choice_query: 'select distinct left(poverty_level, 8) from optimized.projects'
      -
        column: 'grade_level'
        metrics:
          - 'sum' 
        choice_query: 'select distinct grade_level from optimized.projects'
      -
        column: 'teacher_prefix'
        metrics:
          - 'sum' 
        choice_query: 'select distinct teacher_prefix from optimized.projects'
      -
        column: 'school_state'
        metrics:
          - 'sum' 
        choice_query: 'select distinct school_state from optimized.projects'
    
    aggregates:
      -
        quantity: 'total_asking_price'
        metrics:
          - 'sum'
      
    # Since our time-aggregate features are precomputed, feature interval is 
    # irrelvant. We keep 'all' as a default.
    intervals: ['all'] 
    groups: ['entity_id']

  -
    prefix: 'resources_features'
    from_obj: 'optimized.resources'
    knowledge_date_column: 'date_posted'
    
    aggregates_imputation:
      all:
        type: 'zero'
    
    aggregates:
      -
        quantity: 'item_unit_price'
        metrics:
          - 'sum'
      -
        quantity: 'item_quantity'
        metrics:
          - 'sum'
    intervals: ['all']
    groups: ['entity_id']
  
  -
    prefix: 'essay_features'
    from_obj: 'optimized.essays'
    knowledge_date_column: 'date_posted'

    aggregates_imputation:
      all:
        type: 'zero'

    aggregates:
      -
        quantity: 'length(essay)::int'
        metrics:
          - 'sum'
    intervals: ['all']
    groups: ['entity_id']

  -
    prefix: 'donation_features'
    from_obj: 'optimized.time_series_features'
    knowledge_date_column: 'date_posted'

    aggregates_imputation:
      all:
        type: 'constant'
        value: 0 # for testing

    aggregates:
      - # proportion of fully funded projects posted within the last year at the same district
        quantity: 'district_funding_rate_1yr'
        metrics:
          - 'sum'
      - # average donations per project posted within the last year at the same district
        quantity: 'district_avg_donations_1yr'
        metrics:
          - 'sum'
      - # proportion of fully funded projects posted within the last two years at the same district
        quantity: 'district_funding_rate_2yr'
        metrics:
          - 'sum'
      - # average donations per project posted within the two years at the same district
        quantity: 'district_avg_donations_2yr'
        metrics:
          - 'sum'

        # teachers
      - # proportion of fully funded projects posted within the last year by the same teacher
        quantity: 'teacher_funding_rate_1yr'
        metrics:
          - 'sum'
      - # average donations per project posted within the last year by the same teacher
        quantity: 'teacher_avg_donations_1yr'
        metrics:
          - 'sum'
      - # proportion of fully funded projects posted within the last two years by the same teacher
        quantity: 'teacher_funding_rate_2yr'
        metrics:
          - 'sum'
      - # average donations per project posted within the two years by the same teacher
        quantity: 'teacher_avg_donations_2yr'
        metrics:
          - 'sum'

        # zip
      - # proportion of fully funded projects posted within the last year in the same zip code
        quantity: 'zip_funding_rate_1yr'
        metrics:
          - 'sum'
      - # average donations per project posted within the last year in the same zip code
        quantity: 'zip_avg_donations_1yr'
        metrics:
          - 'sum'
      - # proportion of fully funded projects posted within the last two years in the same zip code
        quantity: 'zip_funding_rate_2yr'
        metrics:
          - 'sum'
      - # average donations per project posted within the two years in the same zip code
        quantity: 'zip_avg_donations_2yr'
        metrics:
          - 'sum'

    intervals: ['all']
    groups: ['entity_id']
      
grid_config:
  'sklearn.ensemble.RandomForestClassifier':
      n_estimators: [100, 500, 1000, 2500]
      max_depth: [2, 5, 10, 50]
      min_samples_split: [2, 10, 25, 50]
      n_jobs: [-1]
  'triage.component.catwalk.estimators.classifiers.ScaledLogisticRegression':
      C: [0.001, 0.01, 0.1, 1.0, 10]
      penalty: ['l1', 'l2']
  'sklearn.tree.DecisionTreeClassifier':
      max_depth: [2, 5, 10, 50]
      max_features: [null, 2, 5, 10, 'auto', 'log2']
      min_samples_split: [2, 10, 25, 50]
  'sklearn.dummy.DummyClassifier':
      # baseline, predicts base rate
      strategy: ['prior']
  'triage.component.catwalk.baselines.rankers.PercentileRankOneFeature':
      feature: ['project_features_entity_id_all_total_asking_price_sum']


scoring:
    testing_metric_groups:
        -
            metrics: [precision@, recall@]
            thresholds:
                percentiles: [1, 2, 3, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 60, 70, 80, 90, 100]
                top_n: [50, 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]
        -
            metrics: [roc_auc]
    training_metric_groups:
        -
            metrics: [precision@, recall@]
            thresholds:
                percentiles: [1, 2, 3, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 60, 70, 80, 90, 100]    
                top_n: [50, 100, 200, 300, 500, 600, 700, 800, 900, 1000]

random_seed: 1995