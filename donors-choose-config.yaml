config_version: 'v7'

model_comment: 'quickstart test run'

temporal_config:

    # first date your feature data is good
    #
    feature_start_time: '2012-06-01'
    feature_end_time: '2013-06-01'

    # first date your labels are good
    # donorschoose: as far back as we have good donation data
    # defines entire span of label generation
    label_start_time: '2012-06-01'
    label_end_time: '2013-06-01'

    model_update_frequency: '1month'

    # we sample every day, since new projects are posted
    # every day
    training_as_of_date_frequencies: ['1day']

    # length of time defining a test set
    test_durations: ['1month']
    test_as_of_date_frequencies: ['1day']
    
    # like our project timeout
    training_label_timespans: ['4month']
    test_label_timespans: ['4month']
    
    # defines how far back a trainig set reaches
    max_training_histories: ['1month']

cohort_config:
  query: |
    SELECT distinct(entity_id)
      FROM optimized.projects
    WHERE date_posted = '{as_of_date}'::date - interval '1day'

label_config:
  query: |
    WITH donation_totals AS 
            (SELECT projects.entity_id, sum(donation_to_project) as total_donations, 
            total_price_excluding_optional_support AS total_price
            FROM optimized.projects 
            LEFT JOIN optimized.donations ON donations.entity_id = projects.entity_id
            WHERE projects.date_posted = '{as_of_date}'::date - interval '1day'
              AND donations.donation_timestamp < (projects.date_posted 
                + interval '{label_timespan}')
            GROUP BY projects.entity_id, projects.total_price_excluding_optional_support)
        SELECT entity_id,
        (total_donations >= total_price)::int AS outcome  
        FROM optimized.projects
        LEFT JOIN donation_totals using(entity_id)

  name: 'quickstart_label'


feature_aggregations:
  -
    prefix: 'basic_features'
    from_obj: 'optimized.projects'
    knowledge_date_column: 'date_posted'

    aggregates_imputation:
      all:
        type: 'zero'

    aggregates:
      - # test feature
        quantity: 'school_charter::int'
        imputation:
          max:
            type: 'zero'
        metrics:
          - 'max'
    intervals: ['all']
    groups: ['entity_id']

  -
    prefix: 'donation_features'
    from_obj: |
      (select entity_id, 
      (sum(donation_to_project) >= total_price_excluding_optional_support)::int as fully_funded, 
      schoolid,
      teacher_acctid,
      school_zip,
      (date_posted + interval '4month') as knowledge_date_column 
        from optimized.projects 
        join optimized.donations on projects.entity_id = donations.projectid
          and donations.donation_timestamp < (projects.date_posted + interval '4month')
      group by entity_id, schoolid, teacher_acctid, school_zip, (date_posted + interval '4month')) donations_summary
    knowledge_date_column: 'knowledge_date_column'

    aggregates_imputation:
      all:
        type: 'zero'

    aggregates:
      - # prior_donations
        quantity: 'entity_id'
        imputation:
          max:
            type: 'zero'
        metrics:
          - 'max'
    intervals: ['all']
    groups: ['entity_id']




    # aggregates_imputation:
    #   all:
    #     type: 'zero'

    # aggregates:
    #   - # prior_donations
    #     quantity: 'sum(donation_to_project) >= total_price'
    #     metrics:
    #       - 'sum'
    # intervals: ['all']

    # groups:
    #   - ['schoolid', 'teacherid', 'school_zip']

model_grid_preset:  'quickstart'

scoring:
    testing_metric_groups:
        -
          metrics: [precision@]
          thresholds:
            percentiles: [10]
