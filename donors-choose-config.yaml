config_version: 'v7'

model_comment: 'quickstart test run'

temporal_config:

    # first date your feature data is good
    #
    feature_start_time: '2010-01-01'
    feature_end_time: '2013-06-01'

    # first date your labels are good
    # donorschoose: as far back as we have good donation data
    # defines entire span of label generation
    label_start_time: '2010-01-01'
    label_end_time: '2013-06-01'

    model_update_frequency: '1month'

    # we sample every day, since new projects are posted
    # every day
    training_as_of_date_frequencies: ['1day']

    # length of time defining a test set
    test_durations: ['1month']
    test_as_of_date_frequencies: ['1day']
    
    # like our project timeout
    training_label_timespans: ['4month']
    test_label_timespans: ['4month']
    
    # defines how far back a trainig set reaches
    max_training_histories: ['1month']

cohort_config:
  query: |
    SELECT distinct(projects.projectid) as entity_id
      FROM projects
    WHERE date_posted = {as_of_date}

label_config:
  query: |
    WITH donation_totals AS 
            (SELECT projects.projectid, sum(donation_to_project) as total_donations, 
            total_price_excluding_optional_support AS total_price
            FROM projects 
            LEFT JOIN donations ON donations.projectid = projects.projectid 
            WHERE donations.donation_timestamp < (projects.date_posted 
                + interval '{label_timespan}')
            AND date_posted BETWEEN '{date_start}' AND '{date_end}'
            GROUP BY projects.projectid, projects.total_price_excluding_optional_support)
        SELECT projectid as entity_id,
        total_donations >= total_price AS outcome  
        FROM projects
        LEFT JOIN donation_totals using(projectid)
        WHERE date_posted = {as_of_date}
        ORDER BY projects.projectid

  name: 'quickstart_label'


feature_aggregations:
  -
    prefix: 'qstest'
    from_obj: '<< YOUR_VALUE_HERE >>'
    knowledge_date_column: '<< YOUR_VALUE_HERE >>'

    aggregates_imputation:
      count:
        type: 'zero_noflag'

    aggregates:
      -
        quantity:
          total: "*"
        metrics:
          - 'count'

    intervals: ['all']

    groups:
      - 'entity_id'

model_grid_preset:  'quickstart'

scoring:
    testing_metric_groups:
        -
          metrics: [precision@]
          thresholds:
            percentiles: [1]


    training_metric_groups:
      -
          metrics: [precision@]
          thresholds:
            percentiles: [1]